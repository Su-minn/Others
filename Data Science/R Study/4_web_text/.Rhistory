##0 JDK 설치
system('java -version')
key = ''
key = 'KakaoAK e7780758e31f2cf06596644539b35535'
mean_abc = function(a, b, c){
M = (a+b+c)/3
return(M)
}
mean_abc(5, 8, 11)
install.packages('httr')
Func_Get_latlong = function(addr, key){
addr_rev = gsub('([[:alnum:]]{1,} [[:alnum:]]{1,} [[:alnum:]]{1,} [[:alnum:]]{1,} [[:alnum:]]{1,}) .*', '\\1', addr)
addr_Queryurl = paste0('http://dapi.kakao.com/v2/local/search/address.json?query=', addr_rev)
if (Encoding(addr_Queryurl)!='UTF-8') addr_Queryurl = iconv(addr_Queryurl, to='UTF-8')
Info_Get = httr::GET(URLencode(addr_Queryurl),
httr::add_headers(Authorization=key))
Info_Get_json = httr::content(Info_Get, as='text')
temp_return = (jsonlite::fromJSON(Info_Get_json, simplifyDataFrame=T)$documents)[c('x','y')]
if ( !is.null(temp_return$x) & length(temp_return$x)>=2) temp_return = temp_return[1,]
return(temp_return)
}
Func_Get_latlong = function(addr, key){
addr_rev = gsub('([[:alnum:]]{1,} [[:alnum:]]{1,} [[:alnum:]]{1,} [[:alnum:]]{1,} [[:alnum:]]{1,}) .*', '\\1', addr)
addr_Queryurl = paste0('http://dapi.kakao.com/v2/local/search/address.json?query=', addr_rev)
if (Encoding(addr_Queryurl)!='UTF-8') addr_Queryurl = iconv(addr_Queryurl, to='UTF-8')
Info_Get = httr::GET(URLencode(addr_Queryurl),
httr::add_headers(Authorization=key))
Info_Get_json = httr::content(Info_Get, as='text')
temp_return = (jsonlite::fromJSON(Info_Get_json, simplifyDataFrame=T)$documents)[c('x','y')]
if ( !is.null(temp_return$x) & length(temp_return$x)>=2) temp_return = temp_return[1,]
return(temp_return)
}
latlon = Func_Get_latlong('서울특별시 성북구 안암로 145 고려대학교', key)
latlon
Func_Get_latlong('서울특별시 동대문구 제기동 왕산로19라길47 제스트빌', key)
Func_Search_latlong = function(keyword, latlon, radius, key=key){
keyword_Queryurl = paste0('http://dapi.kakao.com/v2/local/search/keyword.json?x=', latlon$x, '&y=', latlon$y,'&radius=', radius, '&query=', keyword)
if (Encoding(keyword_Queryurl)!='UTF-8') keyword_Queryurl = iconv(keyword_Queryurl, to='UTF-8')
Info_Get = httr::GET(URLencode(keyword_Queryurl),
httr::add_headers(Authorization=key))
Info_Get_json = httr::content(Info_Get, as='text')
temp_return = (jsonlite::fromJSON(Info_Get_json, simplifyDataFrame=T)$documents)
return(temp_return)
}
KU = Func_Search_latlong('고려대학교 본관', latlon, 1000, key)
KU
KU = KU[1, 11:12]
KU
SB_nearby = Func_Search_latlong('스타벅스', KU, 2000, key)
SB_nearby
ab = Func_Get_latlong('서울특별시 동대문구 제기동 왕산로19라길47 제스트빌', key)
ttt = Func_Search_latlong('편의점', ab, 2000, key)
ttt
ttt = Func_Search_latlong('내과', ab, 2000, key)
ttt
# 패키지 설치 및 불러오기
install.packages('ggmap')
library(ggmap)
# register_google('API Key') 실행
ggkey = 'AIzaSyCg2ceZXU60KOTidn_9Bs6lWPomohuEJLk'
register_google(ggkey)
# geocode( )를 활용한 위도, 경도 확인
# 경도(longitude, 왼쪽/오른쪽)/위도(latitude, 위아래) 확인
latlon_gg = geocode('서울특별시 성북구 안암로 145')
latlon_gg
as.numeric(latlon_gg)
aggr_data = read.csv('data/result_ggmap.csv', fileEncoding='euc-kr')
aggr_data
m = get_googlemap('Seoul', zoom = 11, maptype = 'roadmap')
windows()
ggmap(m)
ggmap(m) + geom_point(aes(x=lon, y=lat, size=mean_call),
data=aggr_data,
col='#862633',
alpha=0.4)
ggmap(m) + geom_point(aes(x=lon, y=lat, size=mean_call),
data=aggr_data,
col='#862633',
alpha=0.4) +
geom_text(aes(label=시군구), data=aggr_data, vjust=1, hjust=1)
ggmap(m)
# 경도, 위도 확인
# latlon = Func_Get_latlong('서울특별시 성북구 안암동 안암로 145', key)
# SB_nearby = Func_Search_latlong('스타벅스', latlon, 1000, key)
KU
str(KU)
KU$x = as.numeric(KU$x)
KU$y = as.numeric(KU$y)
## 글자(character)를 숫자(numeric)로 변환
KU
SB_nearby$x = as.numeric(SB_nearby$x)
SB_nearby$y = as.numeric(SB_nearby$y)
SB_nearby
# latlon 중심 구글 지도 다운로드
m2 = get_googlemap(c(lon=KU$x, lat=KU$y), zoom = 15, maptype = 'roadmap')
ggmap(m2)
windows()
## location 대신 c(lon=KU$x, lat=KU$y) 넣기
ggmap(m2)
ggmap(m2) + geom_point(aes(x=x, y=y), data=SB_nearby)
## (참고) 이미지 표현하기
install.packages('ggimage')
library(ggimage)
ggmap(m2) +
geom_image(aes(x=x, y=y, image='data/ku.png'), data=KU, size=0.2, alpha=0.9)
geom_image(aes(x=x, y=y, image='data/sb.png'), data=SB-nearby, size=0.2, alpha=0.9)
ggmap(m2) +
geom_image(aes(x=x, y=y, image='data/ku.png'), data=KU, size=0.2, alpha=0.9) +
geom_image(aes(x=x, y=y, image='data/sb.png'), data=SB-nearby, size=0.2, alpha=0.9)
geom_image(aes(x=x, y=y, image='data/sb.png'), data=SB_nearby, size=0.2, alpha=0.9)
ggmap(m2) +
geom_image(aes(x=x, y=y, image='data/ku.png'), data=KU, size=0.2, alpha=0.9) +
geom_image(aes(x=x, y=y, image='data/sb.png'), data=SB_nearby, size=0.2, alpha=0.9)
ggmap(m2) +
geom_image(aes(x=x, y=y, image='data/ku.png'), data=KU, size=0.2, alpha=0.9) +
geom_image(aes(x=x, y=y, image='data/sb.png'), data=SB_nearby, size=0.02, alpha=0.9)
ggmap(m2) +
geom_image(aes(x=x, y=y, image='data/ku.png'), data=KU, size=0.2, alpha=0.9) +
geom_image(aes(x=x, y=y, image='data/sb.png'), data=SB_nearby, size=0.05, alpha=0.9)
# 패키지 설치
install.packages('rvest')
library(rvest)
# 파이프라인을 위한 dplyr 패키지 불러오기
library(dplyr)
url = 'https://search.naver.com/search.naver?where=post&sm=tab_jum&query=웹크롤링'
selector = '#sp_blog_1 > dl > dt > a'
url %>% read_html() %>% html_nodes(selector) %>% html_text()
url = 'https://search.naver.com/search.naver?where=post&sm=tab_jum&query=웹크롤링'
selector = '#sp_blog_2 > dl > dt > a'
url %>% read_html() %>% html_nodes(selector) %>% html_text()
url = 'https://search.naver.com/search.naver?where=post&sm=tab_jum&query=웹크롤링'
selector = '#sp_blog_3 > dl > dt > a'
url %>% read_html() %>% html_nodes(selector) %>% html_text()
# 일반적인 표현을 활용한 제목 한번에 모으기
selector = '#sp_blog_1 > dl > dt > a'
selector = '#sp_blog_3 > dl > dt > a'
selector = '*[id^=sp_blog_] > dl > dt > a'
url %>% read_html() %>% html_nodes(selector) %>% html_text()
url = 'https://search.naver.com/search.naver?where=post&sm=tab_jum&query=고려대학교&start=11'
url %>% read_html() %>% html_nodes(selector) %>% html_text()
# for loop를 활용한 여러 페이지 제목 모으기
text = ''
for (i in 1:5){
url = paste0('https://search.naver.com/search.naver?where=post&sm=tab_jum&query=고려대학교&start=', i*10-9)
text = c(text, url %>% read_html() %>% html_nodes(selector) %>% html_text())
Sys.sleep(2)
}
text
url = 'https://search.naver.com/search.naver?where=news&sm=tab_jum&query=웹크롤링'
selector = '#sp_nws_1 > dl > dt > a'
url %>% read_html() %>% html_nodes(selector) %>% html_text()
url = 'https://search.naver.com/search.naver?where=news&sm=tab_jum&query=웹크롤링'
selector = '#sp_nws_1 > dl > dt > a'
url %>% read_html() %>% html_nodes(selector) %>% html_text()
url
text
url = 'https://search.naver.com/search.naver?where=news&sm=tab_jum&query=웹크롤링'
selector = '#sp_nws_1 > dl > dt > a'
url %>% read_html() %>% html_nodes(selector) %>% html_text()
text
url = 'https://search.naver.com/search.naver?where=post&sm=tab_jum&query=고려대학교&start=11'
url %>% read_html() %>% html_nodes(selector) %>% html_text()
url = 'https://search.naver.com/search.naver?where=post&sm=tab_jum&query=웹크롤링'
selector = '#sp_blog_1 > dl > dt > a'
url %>% read_html() %>% html_nodes(selector) %>% html_text()
url %>% read_html() %>% html_nodes(selector) %>% html_attr('title')
url = 'https://search.naver.com/search.naver?where=news&sm=tab_jum&query=웹크롤링'
selector = '#sp_nws_1 > dl > dt > a'
url %>% read_html() %>% html_nodes(selector) %>% html_text()
url = 'https://search.naver.com/search.naver?where=news&sm=tab_jum&query=웹크롤링'
selector = '#sp_nws1 > dl > dt > a'
url %>% read_html() %>% html_nodes(selector) %>% html_text()
text = ''
for (i in 1:5){
url = paste0('https://search.naver.com/search.naver?where=news&sm=tab_jum&query=고려대학교&start=', i*10-9)
text = c(text, url %>% read_html() %>% html_nodes(selector) %>% html_text())
Sys.sleep(2)
}
text
text = ''
for (i in 1:5){
url = paste0('https://search.naver.com/search.naver?where=news&sm=tab_jum&query=웹크롤링&start=', i*10-9)
text = c(text, url %>% read_html() %>% html_nodes(selector) %>% html_text())
Sys.sleep(2)
}
text
# url 지정
url = 'http://movie.naver.com/movie/bi/mi/pointWriteFormList.nhn?code=163788&type=after&isActualPointWriteExecute=false&isMileageSubscriptionAlready=false&isMileageSubscriptionReject=false&page=1'
# 댓글 불러오기
selector = 'body > div > div > div.score_result > ul > li > div.score_reple > p'
url %>% read_html() %>% html_nodes(selector) %>% html_text(trim=T)
naver_movie_comments = url %>% read_html() %>% html_nodes(selector) %>% html_text(trim=T)
naver_movie_comments = gsub('^관람객(.*)','\\1', naver_movie_comments)
naver_movie_comments
install.packages('devtools')
library(devtools)
## github를 활용한 패키지 설치를 위한 함수 install_github( ) 포함
install.packages('KoNLP')
library(KoNLP)
## 한글 단어 추출 함수 extractNoun( )등 포함
install_github('haven-jeon/NIADic/NIADic', build_vignettes = TRUE)
## 정보화진흥원(NIA)의 오픈소스 사전
install_github('lchiffon/wordcloud2')
library(wordcloud2)
# 사전 만들기
buildDictionary()
ddd = gsub('[[:punct:]]', '', reviews$titles)
# 데이터 불러오기
reviews = read.csv('data/jobplanet_reviews.csv', stringsAsFactors=F, fileEncoding='UTF-8')
reviews$titles
ddd = gsub('[[:punct:]]', '', reviews$titles)
# 명사 추출하기
nouns = extractNoun(reviews$titles, autoSpacing=T)
nouns = extractNoun(reviews$titles, autoSpacing=T)
nouns
KoNLP::convertHangulStringToJamos(ddd[249])
KoNLP::MorphAnalyzer(ddd[249])
# 경계 허물고 단어 빈도 세기
unlist(nouns)
table(unlist(nouns))
nouns_df = as.data.frame(table(unlist(nouns)), stringsAsFactors=F)
library(dplyr)
nouns_df %>% sample_n(10)
nouns_df2 = nouns_df %>%
filter(nchar(Var1)>=2, Freq>=3)
nouns_df2 %>% sample_n(10)
nouns_df %>% sample_n(10)
nouns_df %>% sample_n(10)
nouns_df2 = nouns_df %>%
filter(nchar(Var1)>=2, Freq>=3)
nouns_df2 %>% sample_n(10)
grep('50', reviews$titles, value=T)
wordcloud2(nouns_df2)
windows
windows()
wordcloud2(nouns_df2)
wordcloud2(nouns_df2)
windows()
wordcloud2(nouns_df2)
windows()
wordcloud2(nouns_df2)
wordcloud2(nouns_df2, fontFamily='궁서')
wordcloud2(nouns_df2, fontFamily='나눔바른고딕')
reviews = read.csv('data/jobplanet_reviews.csv', stringsAsFactors=F, fileEncoding='UTF-8')
reviews$titles
reviews$pros
ddd = gsub('[[:punct:]]', '', reviews$pros)
# 명사 추출하기
nouns = extractNoun(reviews$pros, autoSpacing=T)
# 경계 허물고 단어 빈도 세기
unlist(nouns)
table(unlist(nouns))
# data.frame 형식으로 바꾸기
nouns_df = as.data.frame(table(unlist(nouns)), stringsAsFactors=F)
library(dplyr)
nouns_df %>% sample_n(10)
nouns_df2 = nouns_df %>%
filter(nchar(Var1)>=2, Freq>=3)
nouns_df2 %>% sample_n(10)
wordcloud2(nouns_df2)
install.packages('RSelenium')
library('RSelenium')
rD = rsDriver(browser='chrome', port=9516L, chromever = '76.0.3809.68')
remDr = rD[['client']]
library('RSelenium')
rD = rsDriver(browser='chrome', port=9516L, chromever = '76.0.3809.68')
remDr = rD[['client']]
rD = rsDriver(browser='chrome', port=9516L, chromever = '76.0.3809.68')
rD = rsDriver(browser='chrome', port=9516L, chromever = '76.0.3809.68')
rD = rsDriver(browser='chrome', port=9516L, chromever = '76.0.3809.132')
rD = rsDriver(browser='chrome', port=9516L, chromever = '76.0.3809.126')
remDr = rD[['client']]
remDr$navigate('https://portal.korea.ac.kr/front/Intro.kpd')
##1. ID/PW 찾아서 값 입력하고 로그인 버튼 누르기
id_elem = remDr$findElement('xpath', '//*[@id="oneid"]')
id_elem$clickElement()
id_elem = remDr$findElement('xpath', '//*[@id="oneid"]')
id_elem$clickElement()
id_elem$sendKeysToActiveElement(list('smsj68'))
##1. ID/PW 찾아서 값 입력하고 로그인 버튼 누르기
id_elem = remDr$findElement('xpath', '//*[@id="oneid"]')
id_elem$clickElement()
id_elem$sendKeysToActiveElement(list('smsj68'))
id_elem$clickElement()
id_elem$sendKeysToElements(list('smsj68'))
##1. ID/PW 찾아서 값 입력하고 로그인 버튼 누르기
id_elem = remDr$findElement('xpath', '//*[@id="oneid"]')
id_elem$clickElement()
id_elem$sendKeysToElements(list('smsj68'))
##1. ID/PW 찾아서 값 입력하고 로그인 버튼 누르기
id_elem = remDr$findElement('xpath', '//*[@id="oneid"]')
id_elem$clickElement()
id_elem$sendKeysToElements(list('smsj68'))
pw_elem = remDr$findElement('xpath', '//*[@id="loginform"]/span/input[2]')
pw_elem$clickElement()
pw_elem$sendKeysToElements(list('wjs0901!'))
url = 'https://infodepot.korea.ac.kr/lecture/LecFrame.jsp?url=LecMajorSub.jsp'
remDr$navigate(url)
sem_elem= remDr$findElement('xpath', '/html/body/div/div[2]/form/div/div[1]/div/select[2]')
## 프레임 옮기기
target_frame = remDr$findElement('name', 'ILec')
target_frame
remDr$switchToFrame(target_frame)
remDr$getPageSource()
sem_elem= remDr$findElement('xpath', '/html/body/div/div[2]/form/div/div[1]/div/select[2]')
sem_elem= remDr$findElement('xpath', '/html/body/div/div[2]/form/div/div[1]/div/select[2]/option[1]')
sem_elem= remDr$findElement('xpath', '/html/body/div/div[2]/form/div/div[1]/div/select[2]/option[1]')
sem_elem$clickElement()
sem_elem= remDr$findElement('xpath', '//*[@id="col"]/option[6]')
sem2_elem= remDr$findElement('xpath', '//*[@id="col"]/option[6]')
sem2_elem$clickElement()
sem_elem= remDr$findElement('xpath', '/html/body/div/div[2]/form/div/div[1]/div/select[2]/option[1]')
sem_elem$clickElement()
sem2_elem= remDr$findElement('xpath', '//*[@id="col"]/option[6]')
sem2_elem$clickElement()
sem3_elem= remDr$findElement('xpath', '//*[@id="dept"]/option[2]')
sem3_elem$clickElement()
btn_elem= remDr$findElement('xpath', '/html/body/div/div[2]/form/div[1]/div[1]/span[2]/input')
btn_elem$clickElement()
html_target = remDr$getPageSource()
## Windows에서는 언어 변경
Sys.setlocale("LC_ALL", "English")
table_target = read_html(html_target[[1]], encoding = 'UTF-8') %>% html_table()
Sys.setlocale("LC_ALL", "Korean")
result = table_target[[1]]
## Mac에서는 바로 실행
table_target = read_html(html_target[[1]], encoding = 'UTF-8') %>% html_table()
Sys.setlocale("LC_ALL", "English")
table_target = read_html(html_target[[1]], encoding = 'UTF-8') %>% html_table()
Sys.setlocale("LC_ALL", "Korean")
result = table_target[[1]]
html_target = remDr$getPageSource()
library(rvest)
## Windows에서는 언어 변경
Sys.setlocale("LC_ALL", "English")
table_target = read_html(html_target[[1]], encoding = 'UTF-8') %>% html_table()
Sys.setlocale("LC_ALL", "Korean")
result = table_target[[1]]
result
View(result)
